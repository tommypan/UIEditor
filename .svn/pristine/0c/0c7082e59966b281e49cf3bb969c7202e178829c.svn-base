package src.controls
{
	import events.ScrollPolicy;
	
	import flash.display.Bitmap;
	import flash.display.BitmapData;
	import flash.display.Loader;
	import flash.display.Sprite;
	import flash.events.Event;
	import flash.events.FocusEvent;
	import flash.net.URLRequest;
	import flash.utils.getQualifiedClassName;
	
	import interfaces.ILabel;
	
	import mx.containers.Box;
	import mx.containers.HBox;
	import mx.containers.VBox;
	import mx.controls.CheckBox;
	import mx.controls.ColorPicker;
	import mx.controls.ComboBox;
	import mx.controls.Label;
	import mx.controls.TextArea;
	
	import src.MainEditor;
	import src.containers.SettingPanel;
	import src.events.EditorEvents;
	
	public class SettingControls
	{
		private var settingPanel:SettingPanel;
		
		private var previewModeBox:VBox;
		private var commonBox:VBox;
		
		/**
		 * 当前操作的UI 
		 */
		private var currentUI:Sprite;
		
		/**
		 *  相对UI的属性
		 */		
		private var cor:Object = new Object();
		
		
		private var lastUI:Sprite;
		
		/**
		 * 组件的属性，包括 x坐标，y坐标，高度，宽度，但是不包括皮肤这个特殊属性
		 */	
		private var componentsAttributes:Object = new Object();
		/**
		 *  组件的皮肤属性，只是在编辑组件时有用，里面只是介绍组件有哪些皮肤，但是相应的皮肤样式没告诉
		 */	
		private var componentsskins:Object = new Object();
		/**
		 *  组件的皮肤属性，只是在生成xml和代码时有用，里面装的是组件皮肤的相应URL地址，里卖直接告诉组件的那些皮肤具有那些样式
		 */	
		private var skinAttributes:Object = new Object();
		public function SettingControls(_settingPanel:SettingPanel,xml:XML)
		{
			settingPanel = _settingPanel;
			
			//初始化组件属性数据  其中包括皮肤skin
			for(var i:int=0; i<xml.children().length();i++) {
				var object:Object = new Object();
				var newxml:XML = xml.children()[i];
				for(var j:int=0; j<newxml.children().length(); j++){
					if(newxml.children()[j].name().localName == "skin"){
						var skinObject:Object =  new Object();
						var skinxml:XML = newxml.children()[j];
						for(var k:int=0; k<skinxml.children().length();k++) {
							skinObject[k] = skinxml.children()[k];
						}
						componentsskins[xml.children()[i].@name] = skinObject;
					} else {
						var string:String = newxml.children()[j];
						var arr:Array = string.split(",");
						object[arr[0]] = arr;
					}
				}
				componentsAttributes[xml.children()[i].@name] = object;
			}
			
			EditorEvents.dispathcer.dispatchEvent(new EditorEvents(EditorEvents.GET_COMPONENTSATTRIBUTES,componentsAttributes));
			previewModeBox = settingPanel.previewModeBox;
			commonBox = settingPanel.commonBox;
			
			allSetting()
			addEvents();			
		}
		
		private function addEvents():void
		{
			EditorEvents.dispathcer.addEventListener(EditorEvents.EDITUI,setUI);
			EditorEvents.dispathcer.addEventListener(EditorEvents.CANCEL_CHOICE,clearAll);
			EditorEvents.dispathcer.addEventListener(EditorEvents.UPDATE_SETTING,updateSetting);
			EditorEvents.dispathcer.addEventListener(EditorEvents.REMOVE_UI,clearAll);
			EditorEvents.dispathcer.addEventListener(EditorEvents.CHANGE_SKIN,changeSkim);
		}
		
		/**
		 *在属性栏里面拖动皮肤图片到 UI组件的相应皮肤编辑框里面的时候触发 
		 * @param e
		 * 
		 */
		protected function changeSkim(e:EditorEvents):void
		{
			var skinBoxObject:Object = settingPanel.skinboxArr[getQualifiedClassName(currentUI)]
			for (var index:String in skinBoxObject) {
				if(skinBoxObject[index].mouseX < skinBoxObject[index].width && skinBoxObject[index].mouseY < skinBoxObject[index].height) {
					var _loader :Loader = new Loader();
					_loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onHadlePic);
					_loader.load(new URLRequest(e.data));	
					function onHadlePic(event:Event):void
					{
						_loader.contentLoaderInfo.removeEventListener(Event.COMPLETE, onHadlePic);
						var bitmap :Bitmap = event.target.content as Bitmap;
						//改变在编辑器中的UI组件样式
						currentUI[index] = bitmap;
						//复制bitmap，在编辑器的编辑框中显示组件样式
						var bitmapdata:BitmapData = new BitmapData(bitmap.width,bitmap.height);
						bitmapdata.draw(bitmap);
						var copybitmap:Bitmap = new Bitmap(bitmapdata);
						copybitmap.x = copybitmap.y = 1;
						copybitmap.width = copybitmap.height = 98;
						skinBoxObject[index].rawChildren.addChild(copybitmap);
					}
					//在生成代码时改变组件的皮肤属性
					if(skinAttributes[getQualifiedClassName(currentUI)] == null){skinAttributes[getQualifiedClassName(currentUI)] = new Object}
					skinAttributes[getQualifiedClassName(currentUI)][index] = e.data;
					EditorEvents.dispathcer.dispatchEvent(new EditorEvents(EditorEvents.GET_SKINATTRIBUTES,skinAttributes));
				}
			}
		}
		
		
		/**
		 * 显示UI可以设置的属性
		 */		
		private function setUI(e:EditorEvents):void
		{	
			var ui:Sprite = e.data;
			if(!ui)return;
			if(currentUI == ui)return;
			if(MainEditor.isPreviewMode)return;
			
			clearAll();
			currentUI = ui;
			
			if(currentUI is ILabel)currentUI.addEventListener(Event.CHANGE,textChange);
			commonSettint(ui);
			skinSetting(ui);
		}
		
		/**
		 * 清空 
		 */		
		public function clearAll(e:EditorEvents = null):void
		{
			while(this.commonBox.numChildren!=0){
				this.commonBox.removeChildAt(0);
			}
			while(settingPanel.skinsBox.numChildren!=0){
				settingPanel.skinsBox.removeChildAt(0);
			}
			
			/*判断当是销毁组件的时候，顺便把settingpanel里面组件的皮肤属性销毁了，*/
			
			if(e != null && e.type == EditorEvents.REMOVE_UI) {
				if(settingPanel.skinboxArr[e.data] != null) {
					settingPanel.skinboxArr[e.data] == null;
				}
			}
		}
		
		/**
		 * 文本变化 
		 */		
		private function textChange(e:Event):void
		{
			if(cor.hasOwnProperty("text")){
				cor["text"].text = currentUI["text"];
				(cor["text"] as TextArea).height = (cor["text"] as TextArea).textHeight+4;
			}
		}
		
		/**
		 * 更新数据 
		 */		
		private function updateSetting(e:EditorEvents):void
		{
			if(currentUI == e.data){
				for each (var string:String in componentsAttributes[getQualifiedClassName(e.data)]) {
					var str:String = string.split(",")[0];
					switch(string.split(",")[1]) {
						case "Input":
							cor[str].text = currentUI[str];
							break;
						case "Boolean":
							cor[str].selected = currentUI[str];
							break;
					}
				}
			}
		}
		
		private function drawUI(e:Event):void
		{
			for each (var string:String in componentsAttributes[getQualifiedClassName(currentUI)]) {
				var str:String = string.split(",")[0];
				switch(string.split(",")[1]) {
					case "Input":
						currentUI[str] = cor[str].text ;
						break;
					case "Boolean":
						currentUI[str] = cor[str].selected;
						break;
				}
				currentUI[str] = cor[str].text;
			}
			
			EditorEvents.dispathcer.dispatchEvent(new EditorEvents(EditorEvents.UPDATE_STAGE));
		}
		
		/**
		 * 记录文本设置 
		 */	
		private function recordTextSetting(e:FocusEvent):void
		{
			lastUI = currentUI;
			if(e.type == FocusEvent.FOCUS_IN){
				EditControls.addStartEdit(currentUI,{name:cor["name"].text,x:cor["x"].text,y:cor["y"].text,
					width:cor["width"].text,height:cor["height"].text});
			}else{
				EditControls.addEndEdit(lastUI,{name:cor["name"].text,x:cor["x"].text,y:cor["y"].text,
					width:cor["width"].text,height:cor["height"].text});
			}
		}
		
		/**
		 * 全局设置 
		 */		
		private function allSetting():void
		{
			//previewModeBox.addChild(createBooleanItem(null,"previewMode"));
			
			var editStateCheck:CheckBox = new CheckBox();
			editStateCheck.label = "编辑状态";
			editStateCheck.addEventListener(Event.CHANGE,function():void{
				MainEditor.isEditState=editStateCheck.selected;
				EditorEvents.dispathcer.dispatchEvent(new EditorEvents(EditorEvents.EDIT_STATE,currentUI));
			} );
			
			var editSkinCheck:CheckBox = new CheckBox();
			editSkinCheck.label = "编辑皮肤";
			
			/*
			点击组件出现编辑皮肤的选项框 
			*/
			editSkinCheck.addEventListener(Event.CHANGE,function():void {
				MainEditor.isEditSkin = editSkinCheck.selected;
				MainEditor.isEditSkin ? settingPanel.skinsBox.visible = true : settingPanel.skinsBox.visible = false;
			} );
			previewModeBox.addChild(editStateCheck);
			previewModeBox.addChild(editSkinCheck);
		}
		
		/**
		 * 公共设置 
		 */		
		private function commonSettint(ui:Sprite):void
		{
			var item:HBox;
			for each (var string:String in componentsAttributes[getQualifiedClassName(ui)]) {
				switch(string.split(",")[1]) {
					case "Input":
						item = createTextInputItem(ui,string.split(",")[0]);
						break;
					case "Boolean":
						item = createBooleanItem(ui,string.split(",")[0]);
						break;
				}
				commonBox.addChild(item);
			}
		}
		
		private function skinSetting(ui:Sprite):void {
			if(settingPanel.skinboxArr[getQualifiedClassName(currentUI)] != null) {
				for(var style:String in settingPanel.skinboxArr[getQualifiedClassName(currentUI)]) {
					var styleLabel:Label = new Label();
					styleLabel.text = style;
					settingPanel.skinsBox.addChild(styleLabel);
					settingPanel.skinsBox.addChild(settingPanel.skinboxArr[getQualifiedClassName(currentUI)][style]);
				}
				return
			};
			var skinObject:Object = componentsskins[getQualifiedClassName(currentUI)];
			if(skinObject == null) {return;}
			var skinBoxObject:Object = new Object();
			for each(var string:String in skinObject) {
				var skinLabel:Label = new Label();
				skinLabel.text = string;
				
				var box:Box = new Box();
				box.setStyle("borderStyle","solid");
				box.width = 100;
				box.height = 100;
				skinBoxObject[string] = box;
				settingPanel.skinsBox.addChild(skinLabel);
				settingPanel.skinsBox.addChild(box);
			}
			//同样判断一遍 组件现在是否处于皮肤编辑状态
			MainEditor.isEditSkin ? settingPanel.skinsBox.visible = true : settingPanel.skinsBox.visible = false;
			settingPanel.skinboxArr[getQualifiedClassName(currentUI)] = skinBoxObject;
		}
		/**
		 * 创建项目
		 */		
		public function createTextInputItem(ui:Sprite,attributeName:String):HBox
		{
			var nameLabel:Label = new Label();
			nameLabel.text = attributeName;
			var textArea:TextArea = new TextArea();
			textArea.wordWrap = true;
			textArea.width = 120;
			textArea.height = 22;
			textArea.text = ui[attributeName];	
			textArea.verticalScrollPolicy = ScrollPolicy.OFF;
			var hbox:HBox = new HBox();
			hbox.addChild(nameLabel);
			hbox.addChild(textArea);
			textArea.addEventListener(Event.CHANGE,drawUI);		
			textArea.addEventListener(FocusEvent.FOCUS_IN,recordTextSetting)
			textArea.addEventListener(FocusEvent.FOCUS_OUT,recordTextSetting)
			cor[attributeName] = textArea;
			return hbox;
		}
		
		/**
		 * 创建Boolean属性容器
		 */	
		private function createBooleanItem(ui:Sprite,attributeName:String):HBox
		{
			var checkBox:CheckBox = new CheckBox();
			var hbox:HBox = new HBox();
			hbox.addChild(checkBox);
			checkBox.addEventListener(Event.CHANGE,drawUI);
			checkBox.label = "粗体";
			checkBox.selected = ui[attributeName];
			cor[attributeName] = checkBox;
			return hbox;
		}
		
		/**
		 * 创建ComboBox选择容器
		 */		
		private function createComboBoxItem(ui:Sprite,attributeName:String):HBox
		{
			var nameLabel:Label = new Label();
			var comboBox:ComboBox = new ComboBox();
			var hbox:HBox = new HBox();
			var arr:Array = new Array();
			hbox.addChild(nameLabel);
			hbox.addChild(comboBox);
			comboBox.addEventListener(Event.CHANGE,drawUI);
			
			switch(attributeName)
			{
				case "labelPlacement":
					nameLabel.text = "标签位置";
					arr.push({label:"bottom"});
					arr.push({label:"top"});
					arr.push({label:"left"});
					arr.push({label:"right"});
					comboBox.dataProvider = arr;
					if(ui[attributeName] == "bottom"){
						comboBox.selectedIndex = 0
					}else if(ui[attributeName] == "top"){
						comboBox.selectedIndex = 1
					}else if(ui[attributeName] == "left"){
						comboBox.selectedIndex = 2
					}else{
						comboBox.selectedIndex = 3
					}
					cor[attributeName] = comboBox;
					break;
			}
			return hbox;
		}
		
		/**
		 * 创建选择颜色容器 
		 * @return 
		 * 
		 */
		private function creatColorItem(ui:Sprite,attributeName:String):HBox
		{
			var nameLabel:Label = new Label();
			var colorPicker:ColorPicker = new ColorPicker();
			var hbox:HBox = new HBox();
			hbox.addChild(nameLabel);
			hbox.addChild(colorPicker);
			colorPicker.addEventListener(Event.CHANGE,drawUI);
			
			switch(attributeName)
			{
				case "color":
					nameLabel.text = "颜色  :";
					colorPicker.selectedColor = ui[attributeName];
					cor[attributeName] = colorPicker;
					break;
			}
			return hbox;
		}
	}
}