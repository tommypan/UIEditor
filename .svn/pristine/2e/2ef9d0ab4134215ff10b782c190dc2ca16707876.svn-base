package src.controls
{
	import containers.SDPopupWin;
	
	import flash.events.MouseEvent;
	import flash.filesystem.File;
	import flash.net.FileReference;
	import flash.utils.ByteArray;
	
	import mx.containers.Canvas;
	import mx.controls.Button;
	import mx.controls.TextArea;
	import mx.core.EdgeMetrics;
	
	import src.MainEditor;
	import src.MenuPanel;
	import src.containers.CodePanel;
	import src.events.CodeEvent;
	import src.events.EditorEvents;
	import src.events.KeyEvent;
	
	/**
	 * 菜单控制器 
	 * @author yurs
	 * 
	 */	
	public class MenuControls
	{
		private var state:String = "";
		private var menuPanel:MenuPanel;
		
		private var exportCodeBtn:Button;
		private var importXMLBtn:Button;
		private var exportXMLBtn:Button;
		private var helpBtn:Button;
		private var codePanel:CodePanel;
		private var newBuildBtn:Button;
		
		private var winUIArr:Array;
		
		public function MenuControls(_menuPanel:MenuPanel)
		{
			menuPanel = _menuPanel;
			
			exportCodeBtn = menuPanel.exportCodeBtn;
			importXMLBtn = menuPanel.importXMLBtn;
			exportXMLBtn = menuPanel.exportXMLBtn;
			helpBtn = menuPanel.helpBtn;
			codePanel = menuPanel.codePanel;
			newBuildBtn = menuPanel.newBuild;
			
			EditorEvents.dispathcer.addEventListener(EditorEvents.GET_MAINWIN,function(e:EditorEvents):void{
				winUIArr = e.data});
			EditorEvents.dispathcer.addEventListener(EditorEvents.CREATE_XML_COMPLETE,function(e:EditorEvents):void{
				codePanel.codeText.text = e.data;
				state = "ExportXML";
			});
			EditorEvents.dispathcer.addEventListener(EditorEvents.CREATE_CODE_COMPLETE,function(e:EditorEvents):void{
				codePanel.codeText.text = e.data;
				state = "ExportCODE";
			});
			EditorEvents.dispathcer.addEventListener(KeyEvent.SAVE_CODE,function(e:KeyEvent):void{
				codeBtnClick(e.data)});
			
			exportCodeBtn.addEventListener(MouseEvent.CLICK,function():void{codeBtnClick("exportCode")});
			importXMLBtn.addEventListener(MouseEvent.CLICK,function():void{codeBtnClick("import")});
			exportXMLBtn.addEventListener(MouseEvent.CLICK,function():void{codeBtnClick("export")});
			newBuildBtn.addEventListener(MouseEvent.CLICK,newBuild);
		}
		
		/**
		 * 新建
		 * @param e
		 * 
		 */		
		private function newBuild(e:MouseEvent):void
		{
			EditorEvents.dispathcer.dispatchEvent(new EditorEvents(EditorEvents.NEW_BUILD));
		}
		
		/**
		 * 生成代码 
		 * @param e
		 * 
		 */		
		private function codeBtnClick(name:String):void
		{
			state = "";
			MainEditor.isEditState = false;
			EditorEvents.dispathcer.dispatchEvent(new EditorEvents(EditorEvents.EDIT_STATE));
			
			for(var i:Number = 0;i < menuPanel.parent.numChildren;i++){
				if(menuPanel.parent.getChildAt(i) == codePanel){
					codePanel.codeBtn.removeEventListener(MouseEvent.CLICK,codeEnter);
					menuPanel.parent.removeChild(codePanel);
					return;
				}
			}
			
			if(menuPanel.parent)menuPanel.parent.addChild(codePanel);
			codePanel.codeBtn.addEventListener(MouseEvent.CLICK,codeEnter);
			codePanel.x = 100,codePanel.y = 100;
			
			if(name == "exportCode"){
				codePanel.title = "导出代码"
				EditorEvents.dispathcer.dispatchEvent(new CodeEvent(CodeEvent.CREAT_CODE,winUIArr));
			}else if(name == "import"){
				codePanel.title = "导入XML"
				codePanel.codeText.text = "";
				state = "ImportXML";
			} else if(name == "export") {
				codePanel.title = "导出XML"
				EditorEvents.dispathcer.dispatchEvent(new CodeEvent(CodeEvent.CREATE_XML,winUIArr));
			}
		}
		
		/**
		 * 导入代码 
		 * @param e
		 * 
		 */		
		private function codeEnter(e:MouseEvent):void
		{
			switch(state) {
				case "ExportXML":
					var xml:XML = new XML(codePanel.codeText.text);
					new FileReference().save(xml,"XML.xml");
					break;
				case "ExportCODE":
//					var code:ByteArray =new ByteArray();
//					code.writeMultiByte(codePanel.codeText.text,"utf-8");
					var code:String = codePanel.codeText.text;
					new FileReference().save(code,"code.as");
					break;
				case "ImportXML":
					if(menuPanel.parent)menuPanel.parent.removeChild(codePanel);
					if(codePanel.title == "导入代码")EditorEvents.dispathcer.dispatchEvent(new CodeEvent(CodeEvent.IMPORT_XML,codePanel.codeText.text));
					break;
			}
		}
	}
}